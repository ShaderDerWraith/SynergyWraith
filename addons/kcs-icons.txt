// addons/kcs-icons.js
(function() {
    'use strict';

    console.log("‚úÖ Dodatek KCS Icons za≈Çadowany");

    // --- POCZƒÑTEK TWOJEJ LISTY MONSTERMAPPINGS ---
    const monsterMappings = {
        "Kryj√≥wka Dzikich Kot√≥w": "https://micc.garmory-cdn.cloud/obrazki/npc/e2/st-puma.gif",
        "Las Tropicieli": "https://micc.garmory-cdn.cloud/obrazki/npc/e1/kotolak_lowca.gif",
        // ... (TUTAJ WKLEJ CA≈ÅƒÑ SWOJƒÑ LISTƒò monsterMappings)
        "Grobowiec Przeklƒôtego Krakania - przedsionek": "https://micc.garmory-cdn.cloud/obrazki/npc/kol/kolkrucz.gif",
        "Grota Przebieg≈Çego Tkacza - przedsionek": "https://micc.garmory-cdn.cloud/obrazki/npc/kol/kolos-pajak.gif",
        "Grota Martwodrzew√≥w - przedsionek": "https://micc.garmory-cdn.cloud/obrazki/npc/kol/kolos-dendro.gif",
        "Katakumby Antycznego Gniewu - przedsionek": "https://micc.garmory-cdn.cloud/obrazki/npc/kol/kolos-drakolisz.gif",
    };
    // --- KONIEC TWOJEJ LISTY MONSTERMAPPINGS ---

    const CACHE_KEY = 'kcsMonsterIconCache_v0.1';
    const ICON_CLASS_NAME = 'kcs-monster-icon';

    function getCache() {
        try {
            const cached = localStorage.getItem(CACHE_KEY);
            return cached ? JSON.parse(cached) : {};
        } catch (e) {
            console.error("[KCS Icons] Error reading cache:", e);
            return {};
        }
    }

    function saveCache(cache) {
        try {
            localStorage.setItem(CACHE_KEY, JSON.stringify(cache));
        } catch (e) {
            console.error("[KCS Icons] Error saving cache:", e);
        }
    }

    function getMapNameFromTooltipText(text) {
        if (!text) return null;
        const mapRegex = /Teleportuje gracza na mapƒô:\s*([\s\S]+?)\s*\(\s*\d+,\s*\d+\s*\)\.?/;
        const match = text.match(mapRegex);
        if (match && match[1]) {
            return match[1].trim().replace(/\n/g, ' ');
        }
        return null;
    }

    function addMonsterIcon(itemElement, monsterImgUrl) {
        if (!itemElement) return;

        let existingIcon = itemElement.querySelector(`img.${ICON_CLASS_NAME}`);
        if (existingIcon) {
            if (existingIcon.src === monsterImgUrl) {
                itemElement.dataset.monsterIconAdded = 'true';
                return;
            } else {
                existingIcon.remove();
            }
        }

        const currentPosition = window.getComputedStyle(itemElement).position;
        if (currentPosition === 'static') {
            itemElement.style.position = 'relative';
        }

        const img = document.createElement('img');
        img.src = monsterImgUrl;
        img.classList.add(ICON_CLASS_NAME);
        img.style.position = 'absolute';
        img.style.bottom = '0px';
        img.style.right = '0px';
        img.style.width = '32px';
        img.style.height = '32px';
        img.style.zIndex = '10';
        img.style.pointerEvents = 'none';
        img.style.borderRadius = '2px';
        itemElement.appendChild(img);

        const cooldownDiv = itemElement.querySelector('div.cooldown');
        if (cooldownDiv) {
            const cdCurrentPosition = window.getComputedStyle(cooldownDiv).position;
            if (cdCurrentPosition === 'static') {
                cooldownDiv.style.position = 'relative';
            }
            cooldownDiv.style.zIndex = '11';
        }

        const amountDiv = itemElement.querySelector('div.amount');
        if (amountDiv) {
            const amountCurrentPosition = window.getComputedStyle(amountDiv).position;
            if (amountCurrentPosition === 'static') {
                amountDiv.style.position = 'relative';
            }
            amountDiv.style.zIndex = '11';
        }

        itemElement.dataset.monsterIconAdded = 'true';
    }

    function initKCSAddon() {
        console.log("üöÄ Inicjalizacja dodatku KCS Icons");

        const tooltipObserver = new MutationObserver((mutationsList) => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === Node.ELEMENT_NODE && node.classList.contains('tip-wrapper')) {
                            const tooltipNode = node;
                            const itemDivInTooltip = tooltipNode.querySelector('.item-head .item');
                            if (!itemDivInTooltip) return;

                            const itemNameElement = tooltipNode.querySelector('.item-name');
                            if (!itemNameElement) return;

                            const itemName = itemNameElement.textContent;
                            if (!(itemName.includes("Kamie≈Ñ Czerwonego Smoka") || itemName.includes("Zw√≥j Czerwonego Smoka"))) {
                                return;
                            }

                            let itemId = null;
                            for (const cls of itemDivInTooltip.classList) {
                                if (cls.startsWith('item-id-')) {
                                    itemId = cls.substring('item-id-'.length);
                                    break;
                                }
                            }
                            if (!itemId) return;

                            const mapTextElement = tooltipNode.querySelector('.item-tip-section.s-7');
                            if (!mapTextElement) return;

                            const rawMapText = mapTextElement.textContent;
                            const parsedMapName = getMapNameFromTooltipText(rawMapText);

                            if (parsedMapName && monsterMappings[parsedMapName]) {
                                const monsterImgUrl = monsterMappings[parsedMapName];
                                const inventoryItem = document.querySelector(`.item.item-id-${itemId}`);
                                if (inventoryItem) {
                                    addMonsterIcon(inventoryItem, monsterImgUrl);
                                    const cache = getCache();
                                    if (cache[itemId] !== monsterImgUrl) {
                                        cache[itemId] = monsterImgUrl;
                                        saveCache(cache);
                                    }
                                }
                            }
                        }
                    });
                }
            }
        });

        function applyIconsFromCache() {
            const cache = getCache();
            if (Object.keys(cache).length === 0) return;
            
            const allItems = document.querySelectorAll('.item[class*="item-id-"]');
            allItems.forEach(itemElement => {
                let itemId = null;
                for (const cls of itemElement.classList) {
                    if (cls.startsWith('item-id-')) {
                        itemId = cls.substring('item-id-'.length);
                        break;
                    }
                }
                if (itemId && cache[itemId]) {
                    addMonsterIcon(itemElement, cache[itemId]);
                }
            });
        }

        const dynamicItemObserver = new MutationObserver((mutationsList) => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    let potentiallyNewItems = false;
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            if (node.matches('.item[class*="item-id-"]') || node.querySelector('.item[class*="item-id-"]')) {
                                potentiallyNewItems = true;
                            }
                        }
                    });
                    if (potentiallyNewItems) {
                        applyIconsFromCache();
                    }
                }
            }
        });

        // Start observers
        tooltipObserver.observe(document.body, { childList: true, subtree: true });
        dynamicItemObserver.observe(document.body, { childList: true, subtree: true });

        // Initial apply
        applyIconsFromCache();

        console.log("‚úÖ Dodatek KCS Icons zosta≈Ç pomy≈õlnie zainicjalizowany");
    }

    // Wait for game to load
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initKCSAddon);
    } else {
        setTimeout(initKCSAddon, 1000);
    }

})();
